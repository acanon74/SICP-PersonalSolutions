
#lang racket/base

(define (cube x) (* x x x))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b)
      )
   )
)


(define (get-h a b n)
  (/ (- b a) n)
)

(define a 0)
(define b 1)
(define n 100)

(define h (get-h a b n))

(define (simpson f a t h)

  (cond (= t 0) (f (+ a (* t h)))
        (even? t) (* 2 (f (+ a (* t h))))
        (else (* 4 (f (+ a (* t h)))))
  )

)

(define (sum-s f a b n h t)
  

  (* (/ h 3) (+ (simpson f a t h)
     (sum-s f a b n h (+ t 1))
  ))

  )

