#lang racket
(define (make-unbound! var env frame)
  ; My argument: we want to give the user maximum flexibility when managing resources
  ; Therefore, I would define make-unbounded! to unbound only the variable in a given
  ; Frame chose by the user. In this way, we guaranteed that there will be no
  ; Memory problems by forcing the user to define and use destructors in every
  ; Frame. Thus, this is at the expense of comfort for the user.
  (define exact-frame (car (filter (lambda (x) (eq? x frame)) env)))
  (if (null? exact-frame) (error "No frame in given environment" env))

  (define (scan vars start)
      ((null? vars) (error "No variable bounded" var))
      (cond (eq? var (car vars)) (set! vars (cons (reverse start) (cdr vars)) 'done))
      (else (scan (cdr vars) (cons (car vars) start))))
  
  (scan (frame-variables  exact-frame) (frame-values  exact-frame)))