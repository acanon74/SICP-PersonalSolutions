#lang sicp
(vector-ref vector n)

(vector-set! vector n value)

(assign reg1 (op car) (reg reg2))
(assign reg1 (op cdr) (reg reg2))
(assign (reg1) (op vector-ref) (reg the-cars) (reg (reg2)))
(assign (reg1) (op vector-ref) (reg the-cdrs) (reg (reg2)))

(perform (op set-car! ) (reg (regt)) (reg (reg2)))
(perform (op set-cdr! ) (reg (regt)) (reg (reg2)))
(perform
 (op vector-set!) (reg the-cars) (reg (regt)) (reg (reg2)))
(perform
 (op vector-set!) (reg the-cdrs) (reg (regt)) (reg (reg2)))




(assign ( regl ) (op cons) (reg (reg2)) (reg (reg3)))

(perform
 (op vector-set!) (reg the-cars) (reg free) (reg ( reg2 ) ) )
(perform
 (op vector-set!) (reg the-cdrs) (reg free) (reg ( reg3 ) ) )
(assign (regl) (reg free))
(assign free (op +) (reg free) (const 1))


(op eq?) (reg (regl)) (reg (reg2))


(define ( count-leaves tree)
  (cond ((null? tree) 0)
        ((not (pair? tree) ) 1 )
        (else (+ (count-leaves ( car tree) )
                 (count-leaves ( cdr tree) ) ) ) ) )

(

 loop
 

 )